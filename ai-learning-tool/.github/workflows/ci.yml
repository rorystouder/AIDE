name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
      continue-on-error: true
    
    - name: Compile TypeScript
      run: npm run compile
    
    - name: Run unit tests
      run: npm test
      env:
        CI: true
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}-node${{ matrix.node-version }}
        path: test-results/

  build:
    name: Build and Package
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build extension
      run: npm run compile
    
    - name: Package extension
      run: |
        npm install -g vsce
        vsce package
    
    - name: Upload VSIX artifact
      uses: actions/upload-artifact@v3
      with:
        name: vsix-package
        path: '*.vsix'

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    
    - name: Upload security results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: |
          npm-audit.json
          snyk-report.json

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint -- --format json --output-file eslint-report.json
      continue-on-error: true
    
    - name: Check code complexity
      run: |
        npx complexity-report-html src/**/*.ts --output complexity-report.html
      continue-on-error: true
    
    - name: Upload quality reports
      uses: actions/upload-artifact@v3
      with:
        name: code-quality-reports
        path: |
          eslint-report.json
          complexity-report.html

  publish-preview:
    name: Publish Preview
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Download VSIX artifact
      uses: actions/download-artifact@v3
      with:
        name: vsix-package
    
    - name: Comment PR with preview link
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const vsixFiles = fs.readdirSync('.').filter(f => f.endsWith('.vsix'));
          if (vsixFiles.length > 0) {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Extension preview build is ready!\n\nDownload: ${vsixFiles[0]}\n\nTo test:\n1. Download the VSIX file\n2. In VS Code/Cursor: Extensions â†’ ... â†’ Install from VSIX`
            });
          }

  publish-release:
    name: Publish to Marketplace
    needs: [build, security-scan, code-quality]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build and Package
      run: |
        npm run compile
        npm install -g vsce
        vsce package
    
    - name: Publish to VS Code Marketplace
      run: vsce publish
      env:
        VSCE_PAT: ${{ secrets.VSCE_PAT }}
    
    - name: Publish to Open VSX Registry
      run: |
        npm install -g ovsx
        ovsx publish -p ${{ secrets.OVSX_TOKEN }}
      continue-on-error: true
    
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./ai-learning-tool-*.vsix
        asset_name: ai-learning-tool-${{ github.event.release.tag_name }}.vsix
        asset_content_type: application/vsix

  notify:
    name: Notify Status
    needs: [test, build, security-scan, code-quality]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Send notification
      uses: 8398a7/action-slack@v3
      if: github.event_name != 'pull_request'
      with:
        status: ${{ job.status }}
        text: |
          Build ${{ github.run_number }} completed
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}